/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "_content/Syncfusion.Blazor/scripts/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./bundles/sf-gantt.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./bundles/sf-gantt.js":
/*!*****************************!*\
  !*** ./bundles/sf-gantt.js ***!
  \*****************************/
/*! no exports provided */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _modules_sf_gantt_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/sf-gantt.js */ "./modules/sf-gantt.js");
/* harmony import */ var _modules_sf_gantt_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_modules_sf_gantt_js__WEBPACK_IMPORTED_MODULE_0__);


/***/ }),

/***/ "./modules/sf-gantt.js":
/*!*****************************!*\
  !*** ./modules/sf-gantt.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports) {

window.sfBlazor = window.sfBlazor || {};

window.sfBlazor.Gantt = function () {
  'use strict';
  /**
   * Splitter module is used to define the splitter position in Gantt layout.
   */

  var Splitter =
  /** @class */
  function () {
    function Splitter(parent) {
      this.parent = parent;
    }

    Splitter.prototype.getTotalColumnWidthByIndex = function (index) {
      var width = 0;
      var tr = this.parent.treeGrid.element.querySelectorAll('.e-headercell');
      index = tr.length > index ? index : tr.length;

      for (var column = 0; column < index; column++) {
        width = width + tr[column].offsetWidth;
      }

      return width;
    };

    return Splitter;
  }();
  /**
   * Specifies SfGantt class for native blazor rendering.
   * @hidden
   */


  var SfGantt =
  /** @class */
  function () {
    function SfGantt(element, options, dotnetRef) {
      this.toolbarHeight = 0;
      this.element = element;
      this.element.blazor_instance = this;
      this.dotNetRef = dotnetRef;
      this.options = options;
      this.initModules();
    }

    SfGantt.prototype.initModules = function () {
      this.splitterModule = new Splitter(this);
    };

    return SfGantt;
  }();
  /**
   * CSS Constants
   */

  /** @hidden */
  // Timeline-Class


  var timelineSingleHeaderOuterDiv = 'e-timeline-single-header-outer-div';
  var holidayLabel = 'e-span';
  /**
   * Splitter module is used to define the splitter position in Gantt layout.
   */

  var ChartScroll =
  /** @class */
  function () {
    function ChartScroll(element, ganttHeight, contentHeight) {
      this.previousScroll = {
        top: 0,
        left: 0
      };
      this.element = element.querySelector('.e-chart-scroll-container');
      this.timelineHeaderElement = element.querySelector('.e-timeline-header-container');
      this.treeScrollElement = element.querySelector('#treeGrid' + element.id + "_gridcontrol").querySelector(".e-content");
      this.holidaySpanElement = element.querySelector('.' + holidayLabel);
      this.addEventListeners();
      this.ChartHeight(element, ganttHeight);

      if (!sf.base.isNullOrUndefined(this.holidaySpanElement)) {
        this.UpdateHolidayLabel(contentHeight);
      }
    }

    ChartScroll.prototype.addEventListeners = function () {
      sf.base.EventHandler.add(this.element, 'scroll', this.onScroll, this);
    };

    ChartScroll.prototype.removeEventListeners = function () {
      sf.base.EventHandler.remove(this.element, 'scroll', this.onScroll);
    };

    ChartScroll.prototype.gridScrollHandler = function (top) {
      this.element.scrollTop = top;
    };

    ChartScroll.prototype.onScroll = function () {
      if (this.element.scrollLeft !== this.previousScroll.left) {
        this.timelineHeaderElement.scrollLeft = this.element.scrollLeft;
        this.previousScroll.left = this.element.scrollLeft;
      }

      if (this.element.scrollTop !== this.previousScroll.top) {
        this.treeScrollElement.scrollTop = this.element.scrollTop;
        this.previousScroll.top = this.element.scrollTop;
      }
    };

    ChartScroll.prototype.ChartHeight = function (element, ganttHeight) {
      var toolbarHeight = 0;
      this.toolbarElement = element.querySelector('#' + element.id + '_Gantt_Toolbar');

      if (!sf.base.isNullOrUndefined(this.toolbarElement)) {
        toolbarHeight = this.toolbarElement.offsetHeight;
      }

      this.viewPortHeight = ganttHeight - this.timelineHeaderElement.offsetHeight - toolbarHeight;
      this.element.style.height = this.viewPortHeight + "px";
    };

    ChartScroll.prototype.UpdateHolidayLabel = function (contentHeight) {
      this.holidaySpanElement.style.top = sf.base.formatUnit(this.viewPortHeight < contentHeight ? this.viewPortHeight / 2 : contentHeight / 2);
    };

    ChartScroll.prototype.destroy = function () {
      this.removeEventListeners();
    };

    return ChartScroll;
  }();

  var TreeGrid =
  /** @class */
  function () {
    /**
    * Constructor for the Grid scrolling.
    * @hidden
    */
    function TreeGrid(ganttParent, content) {
      this.previousScroll = {
        top: 0,
        left: 0
      };
      this.parent = ganttParent;
      this.content = content;
      this.addEventListeners();
    }

    TreeGrid.prototype.addEventListeners = function () {
      sf.base.EventHandler.add(this.content, 'scroll', this.scrollHandler, this);
    };

    TreeGrid.prototype.removeEventListeners = function () {
      sf.base.EventHandler.remove(this.content, 'scroll', this.scrollHandler);
    };

    TreeGrid.prototype.scrollHandler = function (e) {
      var content = this.parent.treeGridElement.querySelector('.e-content');

      if (content.scrollTop !== this.previousScroll.top) {
        this.parent.chartScrollModule.gridScrollHandler(content.scrollTop);
      }

      this.previousScroll.top = content.scrollTop;
    };

    TreeGrid.prototype.destroy = function () {
      this.removeEventListeners();
    };

    return TreeGrid;
  }();
  /**
   * Blazor gantt interop handler
   */
  // tslint:disable


  var Gantt = {
    initialize: function initialize(element, options, dotnetRef) {
      new SfGantt(element, options, dotnetRef);
      var offset = {};
      element.blazor_instance.height = offset.height = element.offsetHeight;
      element.blazor_instance.width = offset.width = element.offsetWidth;
      element.blazor_instance.toolbarElement = element.querySelector("#" + element.id + "_Gantt_Toolbar");

      if (!sf.base.isNullOrUndefined(element.blazor_instance.toolbarElement)) {
        element.blazor_instance.toolbarHeight = offset.toolbarHeight = element.blazor_instance.toolbarElement.offsetHeight;
      }

      return offset;
    },
    getTotalColumnWidthByIndex: function getTotalColumnWidthByIndex(element, index) {
      return element.blazor_instance.splitterModule.getTotalColumnWidthByIndex(index);
    },
    treegridDataBound: function treegridDataBound(element, isSingleTier) {
      this.ensureScrollBar(element);
      this.treegridHeaderAlign(element, isSingleTier);
    },
    treegridHeaderAlign: function treegridHeaderAlign(element, isSingleTier) {
      if (isSingleTier) {
        sf.base.addClass(element.blazor_instance.treeGridElement.querySelectorAll('.e-headercell'), timelineSingleHeaderOuterDiv);
        sf.base.addClass(element.blazor_instance.treeGridElement.querySelectorAll('.e-columnheader'), timelineSingleHeaderOuterDiv);
      }
    },
    getTreeGrid: function getTreeGrid(element) {
      element.blazor_instance.treeGrid = element.blazor_instance.treeGridElement.blazor_instance;
    },
    ensureScrollBar: function ensureScrollBar(element) {
      element.blazor_instance.treeGridElement = element.querySelector('#treeGrid' + element.id);
      var content = element.blazor_instance.treeGridElement.querySelector('.e-content');

      if (content) {
        element.blazor_instance.treeGridModule = new TreeGrid(element.blazor_instance, content);
      }

      var scrollWidth = this.getScrollbarWidth(element);

      if (scrollWidth !== 0) {
        content.style.cssText += 'width: calc(100% + ' + scrollWidth + 'px);';
      }
    },
    getScrollbarWidth: function getScrollbarWidth(element) {
      var outer = document.createElement('div');
      outer.style.visibility = 'hidden';
      outer.style.overflow = 'scroll';
      outer.style.msOverflowStyle = 'scrollbar';
      var inner = document.createElement('div');
      outer.appendChild(inner);
      element.appendChild(outer);
      var scrollbarWidth = outer.offsetWidth - inner.offsetWidth;
      outer.parentNode.removeChild(outer);
      return scrollbarWidth;
    },
    ChartInitialize: function ChartInitialize(element, ganttHeight, contentHeight) {
      element.blazor_instance.chartScrollModule = new ChartScroll(element, ganttHeight, contentHeight);
      return element.blazor_instance.chartScrollModule.viewPortHeight;
    }
  };
  return Gantt;
}();

/***/ })

/******/ });